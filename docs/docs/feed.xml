<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-01-29T17:47:26+01:00</updated><id>/feed.xml</id><title type="html">Robert Nickel‚Äôs Blog</title><subtitle>Software Engineer, Agile Advocate and Things Doer</subtitle><author><name>Robert Nickel</name></author><entry><title type="html">Scrum, a cynical definition</title><link href="/2021/01/08/cynical-scrum.html" rel="alternate" type="text/html" title="Scrum, a cynical definition" /><published>2021-01-08T00:00:00+01:00</published><updated>2021-01-08T00:00:00+01:00</updated><id>/2021/01/08/cynical-scrum</id><content type="html" xml:base="/2021/01/08/cynical-scrum.html">&lt;p&gt;&lt;strong&gt;Scrum:&lt;/strong&gt; A highly selling agile framework that is based on a prerequisite that is impossible to fulfill: knowing how long a chunk of work will take to complete [1]. It is all so great!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Autonomous teams that are told to do Scrum.&lt;/li&gt;
  &lt;li&gt;Early feedback and improved communications, but only after two weeks.&lt;/li&gt;
  &lt;li&gt;‚ÄúMeasuring the velocity‚Äù by relying on estimates. Everyone knew this already, when the estimates were done.&lt;/li&gt;
  &lt;li&gt;A Scrum Master that doesn‚Äôt require any skill or experience in order to have ‚Äúmaster‚Äù in his job title.&lt;/li&gt;
  &lt;li&gt;The highest adoption of all agile frameworks, except no one ‚Äúreally‚Äù does Scrum, because it ‚Äúdoesn‚Äôt really fit in this particular context‚Äù, and therefore ‚Äúwe are doing Scrum OUR way‚Äù.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[1] &lt;a href=&quot;https://www.aaron-gray.com/a-criticism-of-scrum/&quot;&gt;Gray, Aaron, A criticism of Scrum&lt;/a&gt;&lt;/p&gt;</content><author><name>Robert Nickel</name></author><category term="Cynical Glossary" /><category term="Agile" /><summary type="html">Scrum: A highly selling agile framework that is based on a prerequisite that is impossible to fulfill: knowing how long a chunk of work will take to complete [1]. It is all so great! Autonomous teams that are told to do Scrum. Early feedback and improved communications, but only after two weeks. ‚ÄúMeasuring the velocity‚Äù by relying on estimates. Everyone knew this already, when the estimates were done. A Scrum Master that doesn‚Äôt require any skill or experience in order to have ‚Äúmaster‚Äù in his job title. The highest adoption of all agile frameworks, except no one ‚Äúreally‚Äù does Scrum, because it ‚Äúdoesn‚Äôt really fit in this particular context‚Äù, and therefore ‚Äúwe are doing Scrum OUR way‚Äù.</summary></entry><entry><title type="html">Introducing Jekyll to this page</title><link href="/2021/01/06/experiment-jekyll.html" rel="alternate" type="text/html" title="Introducing Jekyll to this page" /><published>2021-01-06T00:00:00+01:00</published><updated>2021-01-06T00:00:00+01:00</updated><id>/2021/01/06/experiment-jekyll</id><content type="html" xml:base="/2021/01/06/experiment-jekyll.html">&lt;p&gt;Since 2 years I am operating this blog as pure HTML, CSS and a little bit of JavaScript, first on an Apache webserver, then on Github Pages. Recently a friend asked, if there would be a RSS feed for my blog, since he finds my &lt;a href=&quot;/category/cynical-glossary/index.html&quot;&gt;cynical glossary&lt;/a&gt; a cool idea. I didn‚Äôt have one (&lt;a href=&quot;/feed.xml&quot;&gt;I have one now&lt;/a&gt;), so I did a little bit of research about RSS in general and then I stumbled across Jekyll (again). I knew that Github Pages supports Jekyll themes natively, but never gave it a try. It seemed easy to generate a RSS feed automatically with the plugin &lt;a href=&quot;https://github.com/jekyll/jekyll-feed&quot;&gt;Jekyll feed&lt;/a&gt;, so I gave it a try. First I had some difficulties to set Jekyll up locally, I think due to some Ruby versioning issues, so I started by just pushing my Jekyll code to Github. I could see changes quickly in case the compiled, but destroyed my blog if they didn‚Äôt, so.. I needed to get it running locally soon.&lt;/p&gt;

&lt;p&gt;But first, I wanted to experiment more. The &lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;documentation of Jekyll&lt;/a&gt; is really good and readable to get started, and I found it quite easy to set everything up. I extracted my blog posts into seperate files markdown and html files, that are named after a certain pattern and located in a certain folder. Jekyll then understands that those texts are blog posts, and enables quite a lot of cool features for blogging such as the RSS feed plugin, I just had to turn it on. One aspect I particularly liked about Jekyll was the usage of &lt;a href=&quot;https://shopify.github.io/liquid&quot;&gt;liquid&lt;/a&gt;, which provides conditions, loops and variables/objects for HTML. For example: Instead of repeating HTML for the title of a blog post, I could simply extract that and use the variables of my page object:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;h1&amp;gt;
        &amp;lt;a href=&quot;{{ page.url }}&quot;&amp;gt;{{ page.title }}&amp;lt;/a&amp;gt;
    &amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I put this in a loop, together with the heading, text and signature of the post, and immediately all blog posts were rendered the expected way below each other. Jekyll generates static HTML out of the liquid HTML, so that it can be deployed on a static webserver. &lt;strong&gt;Liquid feels like improved HTML.&lt;/strong&gt; I worked a couple of days (not consistently) on the transition of my blog to Jekyll, and now I have some handy new features, that were easy to build, add and/or configure:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/feed.xml&quot;&gt;The requested RSS feed&lt;/a&gt;, subscribe if you don‚Äôt want to miss any post, &lt;a href=&quot;https://en.wikipedia.org/wiki/RSS&quot;&gt;read this&lt;/a&gt; if you want to know what it is&lt;/li&gt;
  &lt;li&gt;Blog posts have categories&lt;/li&gt;
  &lt;li&gt;Blog posts can be filtered by category, just use the categories listed &lt;a href=&quot;https://robertnickel.online/blog.html&quot;&gt;at the top&lt;/a&gt;, or click on the category in the signature of the post&lt;/li&gt;
  &lt;li&gt;Blog posts have static urls (e.g. &lt;a href=&quot;https://robertnickel.online/2021/01/06/experiment-jekyll.html&quot;&gt;https://robertnickel.online/2021/01/06/experiment-jekyll.html&lt;/a&gt;), just click on the title of a post to go there.&lt;/li&gt;
  &lt;li&gt;I removed the ‚ÄúProjects‚Äù area, since it is a category now, that can be used as a filter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conclusion: Jekyll is very lightweight, for example in comparision with WordPress. It is incredibely well documented and easy to start with (just push something to Github Pages). The terminology is intuitive and the usage of liquid enabled me to not repeat myself and have a scalable solution (in terms of adding content, categories, rss etc.). &lt;strong&gt;I recommend it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; Right after publishing this post I realized, that &lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;Github Pages only supports certain plugins for Jekyll&lt;/a&gt; natively. Therefore, I had two options:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Revert the category pages related changes and not use the plugin.&lt;/li&gt;
  &lt;li&gt;Keep using the plugin and avoid using the Github Pages native Jekyll by just refering to the generated static code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I chose to go with option 2 and found out that I have to create a folder called /docs in order to make it referable as document root for Github Pages. Since I want to avoid having multiple repos or branches, I then created a git pre-commit hook that copies all the files from the generated /_site folder into the /docs folder (which is refered to as document root). I find it odd, that I cannot define custom folders, since I would rather have named it ‚Äústatic‚Äù or similar. Anyway‚Ä¶ using unsupported plugins should now be fine again. üôÇ&lt;/p&gt;</content><author><name>Robert Nickel</name></author><category term="Project" /><summary type="html">Since 2 years I am operating this blog as pure HTML, CSS and a little bit of JavaScript, first on an Apache webserver, then on Github Pages. Recently a friend asked, if there would be a RSS feed for my blog, since he finds my cynical glossary a cool idea. I didn‚Äôt have one (I have one now), so I did a little bit of research about RSS in general and then I stumbled across Jekyll (again). I knew that Github Pages supports Jekyll themes natively, but never gave it a try. It seemed easy to generate a RSS feed automatically with the plugin Jekyll feed, so I gave it a try. First I had some difficulties to set Jekyll up locally, I think due to some Ruby versioning issues, so I started by just pushing my Jekyll code to Github. I could see changes quickly in case the compiled, but destroyed my blog if they didn‚Äôt, so.. I needed to get it running locally soon. But first, I wanted to experiment more. The documentation of Jekyll is really good and readable to get started, and I found it quite easy to set everything up. I extracted my blog posts into seperate files markdown and html files, that are named after a certain pattern and located in a certain folder. Jekyll then understands that those texts are blog posts, and enables quite a lot of cool features for blogging such as the RSS feed plugin, I just had to turn it on. One aspect I particularly liked about Jekyll was the usage of liquid, which provides conditions, loops and variables/objects for HTML. For example: Instead of repeating HTML for the title of a blog post, I could simply extract that and use the variables of my page object:</summary></entry><entry><title type="html">Doing agile, a cynical definition</title><link href="/2020/12/29/cynical-doing-agile.html" rel="alternate" type="text/html" title="Doing agile, a cynical definition" /><published>2020-12-29T00:00:00+01:00</published><updated>2020-12-29T00:00:00+01:00</updated><id>/2020/12/29/cynical-doing-agile</id><content type="html" xml:base="/2020/12/29/cynical-doing-agile.html">&lt;p&gt;&lt;strong&gt;Doing agile:&lt;/strong&gt; We do understand, that every team member is selfish, has poor communication skills and insufficient
knowledge to solve an undefined problem that everyone pretends to understand in a predictable amount of
time.&lt;/p&gt;

&lt;p&gt;Therefore we are shifting the focus from believing the experts and their plans to learning, experimenting
and repeatedly checking something useful gets done. And we do test-driven SAFe T-shaped daily pair
programming Kanban with our Scrum PO.&lt;/p&gt;

&lt;p&gt;P.S. We don‚Äôt do documentation, because we value working software more.&lt;/p&gt;</content><author><name>Robert Nickel</name></author><category term="Cynical Glossary" /><category term="Agile" /><summary type="html">Doing agile: We do understand, that every team member is selfish, has poor communication skills and insufficient knowledge to solve an undefined problem that everyone pretends to understand in a predictable amount of time. Therefore we are shifting the focus from believing the experts and their plans to learning, experimenting and repeatedly checking something useful gets done. And we do test-driven SAFe T-shaped daily pair programming Kanban with our Scrum PO. P.S. We don‚Äôt do documentation, because we value working software more.</summary></entry><entry><title type="html">Too many pigeons for the holes?</title><link href="/2020/12/28/pigeonhole-principle.html" rel="alternate" type="text/html" title="Too many pigeons for the holes?" /><published>2020-12-28T00:00:00+01:00</published><updated>2020-12-28T00:00:00+01:00</updated><id>/2020/12/28/pigeonhole-principle</id><content type="html" xml:base="/2020/12/28/pigeonhole-principle.html">&lt;p&gt;
    While learning for my discrete mathematics exam, I stumbled across the &lt;a
        href=&quot;https://www.youtube.com/watch?v=2-mxYrCNX60&quot;&gt;pigeonhole principle&lt;/a&gt;. A pigeonhole is where
    pigeons like to sit. I started liking it, when I discovered, that it is so obvious in the metaphor but, at
    least for me, took a while to become able to really apply it. The pigeon metaphor goes like this:
    &lt;br&gt;&lt;br&gt;
    &lt;b&gt;If there are more pigeons than pigeonholes, at least one hole will host at least two pigeons.&lt;/b&gt;
&lt;/p&gt;
&lt;div style=&quot;margin-left: 2em&quot;&gt;
    üê¶&amp;nbsp;--&amp;nbsp;&amp;nbsp;üì≠&lt;br&gt;
    üê¶&amp;nbsp;--&amp;nbsp;&amp;nbsp;üì≠&lt;br&gt;
    üê¶&amp;nbsp;--¬¥&lt;br&gt;
&lt;/div&gt;
&lt;p&gt;
    Obvious.
    &lt;br&gt;&lt;br&gt;
    Please tell me &lt;b&gt;how many people in Sydney have the same amount of hair on their head?&lt;/b&gt;
    Lets estimate the maximum amount of hair: 150K. In Sydney live around 5.3M people.
    &lt;b&gt;Preliminary conclusion&lt;/b&gt;: At least 2 people in Sydney have the exact same amount of hair.
    &lt;br&gt;&lt;br&gt;
    The pigeonhole principle goes further: It also tells us, how many people (at least) in Sydney have the same
    amount of hair. Just divide the pigeons by the pigeonholes and ceil the number.
    &lt;br&gt;&lt;br&gt;
    5.3M / 150K ~= 35,3 ceiled to 36.
    &lt;br&gt;&lt;br&gt;
    &lt;b&gt;Conclusion&lt;/b&gt;: At least 36 people in Sydney have the exact same amount of hair.
    &lt;br&gt;&lt;br&gt;
    I believe there are many real world situations, in which the pigeonhole principle makes a lot of sense, and
    I cannot wait to stumble across some of them. To be honest: For this example, it would be more effective to
    count (or estimate) the amount of bald people, assuming they are the biggest group with the same amount of
    hair.
    &lt;br&gt;&lt;br&gt;
    &lt;b&gt;Homework&lt;/b&gt;: At my wedding we had 125 guests. There were 6 different main courses and 3 different side
    dishes,
    and each guest took one main course and one side dish on their plate. How many people at least had the exact
    same meal?
&lt;/p&gt;</content><author><name>Robert Nickel</name></author><category term="Thinking" /><summary type="html">While learning for my discrete mathematics exam, I stumbled across the pigeonhole principle. A pigeonhole is where pigeons like to sit. I started liking it, when I discovered, that it is so obvious in the metaphor but, at least for me, took a while to become able to really apply it. The pigeon metaphor goes like this: If there are more pigeons than pigeonholes, at least one hole will host at least two pigeons. üê¶&amp;nbsp;--&amp;nbsp;&amp;nbsp;üì≠ üê¶&amp;nbsp;--&amp;nbsp;&amp;nbsp;üì≠ üê¶&amp;nbsp;--¬¥ Obvious. Please tell me how many people in Sydney have the same amount of hair on their head? Lets estimate the maximum amount of hair: 150K. In Sydney live around 5.3M people. Preliminary conclusion: At least 2 people in Sydney have the exact same amount of hair. The pigeonhole principle goes further: It also tells us, how many people (at least) in Sydney have the same amount of hair. Just divide the pigeons by the pigeonholes and ceil the number. 5.3M / 150K ~= 35,3 ceiled to 36. Conclusion: At least 36 people in Sydney have the exact same amount of hair. I believe there are many real world situations, in which the pigeonhole principle makes a lot of sense, and I cannot wait to stumble across some of them. To be honest: For this example, it would be more effective to count (or estimate) the amount of bald people, assuming they are the biggest group with the same amount of hair. Homework: At my wedding we had 125 guests. There were 6 different main courses and 3 different side dishes, and each guest took one main course and one side dish on their plate. How many people at least had the exact same meal?</summary></entry><entry><title type="html">Software Engineers are Lumberjacks, Features are Trees</title><link href="/2020/12/18/a-lumberjack-metaphor.html" rel="alternate" type="text/html" title="Software Engineers are Lumberjacks, Features are Trees" /><published>2020-12-18T00:00:00+01:00</published><updated>2020-12-18T00:00:00+01:00</updated><id>/2020/12/18/a-lumberjack-metaphor</id><content type="html" xml:base="/2020/12/18/a-lumberjack-metaphor.html">&lt;p&gt;
    To illustrate 12 very important aspects of agile software engineering, I want to use the oversimplified
    metaphor of lumberjacking. A forester, who represents the product owner, leads a team of lumberjacks,
    which is the development team, to the most important trees to cut down. The trees represent features or
    stories. How is this metaphor valuable?
&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt; &lt;a href=&quot;https://robertnickel.online/thinking#segregating-responsibility&quot;&gt;Segregation of
            responsibility&lt;/a&gt;: One marks the trees to cut, the others define how and do cut them.&lt;/li&gt;
    &lt;li&gt; The lumberjacks who have the strength, skills and tools to cut down trees, although not everyone is
        on the same level of experience, so they help each other out. Some trees can be cut alone, others need
        to be cut together.&lt;/li&gt;
    &lt;li&gt; The forester pays the team of lumberjacks to cut down trees, so that he can futher explore the
        infinite
        forest of valuable trees.
    &lt;/li&gt;
    &lt;li&gt; In order to collaborate, mutual respect for the counterpart&apos;s discipline is required. Discussions
        and
        proposals are valuable and humility is a prerequisite, but the circles of competence are known and
        respected.
    &lt;/li&gt;
    &lt;li&gt; The lumberjacks are able to state concerns: It could be dangerous to cut down a tree, because of
        uncertainty where the tree will fall. Risks, depending on what is on the line (another tree? A
        human?),
        need to be evaluated strategically and should be reduced on the long run.&lt;/li&gt;
    &lt;li&gt; The forester can ask questions: Do you think, we can chop this tree safely already, or do we
        need to chop another tree first?&lt;/li&gt;
    &lt;li&gt; CYA concerns are resolved easier: It is either the wrong tree, or it is the wrong way to cut it
        down.
    &lt;/li&gt;
    &lt;li&gt; No one is perfect: Sometimes a tree is mouldy (=&gt; wrong feature), sometimes the chopping takes
        longer
        than expected (=&gt; unexpected technical complexity).&lt;/li&gt;
    &lt;li&gt;Some trees are in the way and need to be cut down in order to get to the &apos;good&apos; trees.&lt;/li&gt;
    &lt;li&gt; The forester doesn&apos;t tell the lumberjacks to sharpen their chainsaw or axes (=&gt; write tests, update
        IDE&apos;s etc.): They know and do it themselves, better than the forester could. They will do it within
        the
        working hours.&lt;/li&gt;
    &lt;li&gt; It is dangerous to cut trees. It is important to have safety precautions and stick to them (=&gt; QA).
    &lt;/li&gt;
    &lt;li&gt; After a tree is chopped, the work is not done (=&gt; definition of done): It needs to be cut into
        smaller
        pieces and carried away. Then the wood goes trough a number of procedures (=&gt; build pipeline) in
        order
        to
        be made valuable. Sometimes the value is to give shelter, craft furniture or build a ship, sometimes
        it
        just gives comfy warmth in front of a fireplace. The foresters intention might materialize here (=&gt;
        business value).
    &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt; To be honest, I do not know so much about lumberjacking or foresting, so forgive my
    oversimplification and maybe misconceptions. The goal is to write about software engineering
    metaphorically,
    and I find some concepts easy to understand using these wooden examples. I have a more detailled and
    less
    metaphorical article about the &lt;a href=&quot;https://robertnickel.online/thinking#segregating-responsibility&quot;&gt;segregation
        of responsibility
        here&lt;/a&gt;.
&lt;/p&gt;</content><author><name>Robert Nickel</name></author><category term="Agile" /><summary type="html">To illustrate 12 very important aspects of agile software engineering, I want to use the oversimplified metaphor of lumberjacking. A forester, who represents the product owner, leads a team of lumberjacks, which is the development team, to the most important trees to cut down. The trees represent features or stories. How is this metaphor valuable? Segregation of responsibility: One marks the trees to cut, the others define how and do cut them. The lumberjacks who have the strength, skills and tools to cut down trees, although not everyone is on the same level of experience, so they help each other out. Some trees can be cut alone, others need to be cut together. The forester pays the team of lumberjacks to cut down trees, so that he can futher explore the infinite forest of valuable trees. In order to collaborate, mutual respect for the counterpart&apos;s discipline is required. Discussions and proposals are valuable and humility is a prerequisite, but the circles of competence are known and respected. The lumberjacks are able to state concerns: It could be dangerous to cut down a tree, because of uncertainty where the tree will fall. Risks, depending on what is on the line (another tree? A human?), need to be evaluated strategically and should be reduced on the long run. The forester can ask questions: Do you think, we can chop this tree safely already, or do we need to chop another tree first? CYA concerns are resolved easier: It is either the wrong tree, or it is the wrong way to cut it down. No one is perfect: Sometimes a tree is mouldy (=&gt; wrong feature), sometimes the chopping takes longer than expected (=&gt; unexpected technical complexity). Some trees are in the way and need to be cut down in order to get to the &apos;good&apos; trees. The forester doesn&apos;t tell the lumberjacks to sharpen their chainsaw or axes (=&gt; write tests, update IDE&apos;s etc.): They know and do it themselves, better than the forester could. They will do it within the working hours. It is dangerous to cut trees. It is important to have safety precautions and stick to them (=&gt; QA). After a tree is chopped, the work is not done (=&gt; definition of done): It needs to be cut into smaller pieces and carried away. Then the wood goes trough a number of procedures (=&gt; build pipeline) in order to be made valuable. Sometimes the value is to give shelter, craft furniture or build a ship, sometimes it just gives comfy warmth in front of a fireplace. The foresters intention might materialize here (=&gt; business value).</summary></entry><entry><title type="html">TDD to BDD - Principles and Tools with an Impact on Business Value and Communications</title><link href="/2020/12/05/bdd.html" rel="alternate" type="text/html" title="TDD to BDD - Principles and Tools with an Impact on Business Value and Communications" /><published>2020-12-05T00:00:00+01:00</published><updated>2020-12-05T00:00:00+01:00</updated><id>/2020/12/05/bdd</id><content type="html" xml:base="/2020/12/05/bdd.html">&lt;p&gt;For the module ‚ÄúAgile Procedure Models‚Äù at my university, I write an essay about BDDs origin, principles, advantages, evaluation and how to approach it. Since we need to hand in a PDF version and a markdown version, I decided to go the extra mile and have a always up-to-date version of it hosted as Github Pages website here: &lt;strong&gt;&lt;a href=&quot;https://bdd.guru&quot;&gt;bdd.guru&lt;/a&gt;&lt;/strong&gt;,&lt;br /&gt;
so that I can receive early feedback from other readers and the professor. Please send me a mail (robert.nickel@aikq.de) if you have any feedback for me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: &lt;a href=&quot;https://github.com/Robert-Nickel/bdd.guru/blob/master/00_Nickel_BDD.pdf&quot;&gt;The paper is done.&lt;/a&gt;. I think it is worth reading. Feedback is still valuable to me.&lt;/p&gt;

&lt;p&gt;I then realised, that it is generic enough to use it for all future essays and thesis‚Äô, so I extracted a template repository which makes it really easy to get started with a new paper, export it as HTML and host it as Github Pages website with every commit and additionally export it as PDF using pandoc and the latex pdf engine with minimal effort. &lt;a href=&quot;https://github.com/Robert-Nickel/paper&quot;&gt;Find it on Github&lt;/a&gt; to experience the same ease.&lt;/p&gt;</content><author><name>Robert Nickel</name></author><category term="Agile" /><category term="Projects" /><summary type="html">For the module ‚ÄúAgile Procedure Models‚Äù at my university, I write an essay about BDDs origin, principles, advantages, evaluation and how to approach it. Since we need to hand in a PDF version and a markdown version, I decided to go the extra mile and have a always up-to-date version of it hosted as Github Pages website here: bdd.guru, so that I can receive early feedback from other readers and the professor. Please send me a mail (robert.nickel@aikq.de) if you have any feedback for me. Update: The paper is done.. I think it is worth reading. Feedback is still valuable to me. I then realised, that it is generic enough to use it for all future essays and thesis‚Äô, so I extracted a template repository which makes it really easy to get started with a new paper, export it as HTML and host it as Github Pages website with every commit and additionally export it as PDF using pandoc and the latex pdf engine with minimal effort. Find it on Github to experience the same ease.</summary></entry><entry><title type="html">Im doing my masters degree now</title><link href="/2020/10/28/masters-degree.html" rel="alternate" type="text/html" title="Im doing my masters degree now" /><published>2020-10-28T00:00:00+01:00</published><updated>2020-10-28T00:00:00+01:00</updated><id>/2020/10/28/masters-degree</id><content type="html" xml:base="/2020/10/28/masters-degree.html">&lt;p&gt;After finishing my bachelor of science in ‚ÄúComputitional Visualistics and Design‚Äù in 2016 I worked for well         over four years as a Software Engineer at Daimler TSS GmbH in Ulm and Stuttgart. This month I started         studying computer science with focus on software engineering at the HTWG Konstanz. So far, I really like it.&lt;/p&gt;</content><author><name>Robert Nickel</name></author><category term="Personal" /><summary type="html">After finishing my bachelor of science in ‚ÄúComputitional Visualistics and Design‚Äù in 2016 I worked for well over four years as a Software Engineer at Daimler TSS GmbH in Ulm and Stuttgart. This month I started studying computer science with focus on software engineering at the HTWG Konstanz. So far, I really like it.</summary></entry><entry><title type="html">Building this page</title><link href="/2020/10/08/this-page.html" rel="alternate" type="text/html" title="Building this page" /><published>2020-10-08T00:00:00+02:00</published><updated>2020-10-08T00:00:00+02:00</updated><id>/2020/10/08/this-page</id><content type="html" xml:base="/2020/10/08/this-page.html">&lt;p&gt;I‚Äôm building this page myself, this is not a wordpress template. I consider my self a minimalist, this regards belongings, wording and coding. Why do I need thousands of lines of php and javascript and a template, if all I would do with it is display some really simple text and images?&lt;/p&gt;

&lt;p&gt;This text is a simple html paragraph in a div, styled with 3 lines of css. Its simple to maintain and read, and it loads and renders very fast. It is a good example for the difference between simple and easy. It might would‚Äôve been easier to setup wordpress (or similar) and just use a template. But that wouldn‚Äôt be simplest possible solution, I would have to update wordpress on a regular basis, deal with licensing, support php etc. It is so much unneccesary complexity. This way I had to put some effort into it, but I could avoid complexity and gain simplicity, even though its (maybe) not the easiest way.&lt;/p&gt;

&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/Robert-Nickel/RobertNickel.online&quot;&gt;source code here&lt;/a&gt;. If you find typos, feel free to send a pull request. üòÑ&lt;/p&gt;</content><author><name>Robert Nickel</name></author><category term="Projects" /><summary type="html">I‚Äôm building this page myself, this is not a wordpress template. I consider my self a minimalist, this regards belongings, wording and coding. Why do I need thousands of lines of php and javascript and a template, if all I would do with it is display some really simple text and images? This text is a simple html paragraph in a div, styled with 3 lines of css. Its simple to maintain and read, and it loads and renders very fast. It is a good example for the difference between simple and easy. It might would‚Äôve been easier to setup wordpress (or similar) and just use a template. But that wouldn‚Äôt be simplest possible solution, I would have to update wordpress on a regular basis, deal with licensing, support php etc. It is so much unneccesary complexity. This way I had to put some effort into it, but I could avoid complexity and gain simplicity, even though its (maybe) not the easiest way. You can find the source code here. If you find typos, feel free to send a pull request. üòÑ</summary></entry><entry><title type="html">I built a Telegram Bot for pupils/students schedule (MyScheduleRobot)</title><link href="/2020/09/09/schedule-bot.html" rel="alternate" type="text/html" title="I built a Telegram Bot for pupils/students schedule (MyScheduleRobot)" /><published>2020-09-09T00:00:00+02:00</published><updated>2020-09-09T00:00:00+02:00</updated><id>/2020/09/09/schedule-bot</id><content type="html" xml:base="/2020/09/09/schedule-bot.html">&lt;p&gt;
    My younger brother tried to build a telegram bot, that gives him some information about his schedule,
    so he started, but stuck due to some infrastructure problems. I attempted to help him,
    and then basically took over the whole thing. I used claudia.js with its deployment and bot-builder
    features,
    and deployed it to AWS Lambda. Document based persistance happens using DynamoDB.

    You can test the bot here (imagine you are still at school):
    &lt;a href=&quot;http://t.me/MyScheduleRobot&quot;&gt;t.me/MyScheduleRobot&lt;/a&gt;

    Now some functional details: This bot is a schedule bot, it is not a calendar.
    To make the difference, and therefore what it does and what it doesn&apos;t, more clear:
&lt;/p&gt;&lt;br&gt;
&lt;table align=&quot;center&quot;&gt;
    &lt;tr&gt;
        &lt;td class=&quot;table-entry&quot;&gt;&lt;b&gt;Schedule&lt;/b&gt;&lt;/td&gt;
        &lt;td class=&quot;table-entry&quot;&gt;&lt;b&gt;Calendar&lt;/b&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class=&quot;table-entry&quot;&gt;Days repeat every week&lt;/td&gt;
        &lt;td class=&quot;table-entry&quot;&gt;Days are different every week&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class=&quot;table-entry&quot;&gt;Timeslots repeat every day (üîî rings)&lt;/td&gt;
        &lt;td class=&quot;table-entry&quot;&gt;Timeslots are vary a lot&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&quot;https://i.pinimg.com/originals/e8/ec/d1/e8ecd11f3c278afd7b3543a2b81fd1ea.png&quot;&gt;Compare
                this&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://cdn.vertex42.com/calendars/images/monthly-calendar-with-combined-weekend.png&quot;&gt;with
                this&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;p&gt;A short high-level summary is:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;Define all the subjects (plus room, teacher etc.) you have, the timeslots (that repeat every day) and
        your timezone&lt;/li&gt;
    &lt;li&gt;Configure your schedule, that is e.g. which subject you have first on monday, which second etc.&lt;/li&gt;
    &lt;li&gt;You get information for the whole week, just today, tomorrow or even now by chatting with the bot&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Use /help to get the detailed and always up-to-date list of things the bot can do.&lt;/p&gt;

&lt;p&gt;Lessons learned:&lt;br&gt;
&lt;ul&gt;
    &lt;li&gt;Applying &lt;a href=&quot;https://en.wikipedia.org/wiki/KISS_principle&quot;&gt;KISS principle&lt;/a&gt; is good.&lt;/li&gt;
    &lt;li&gt;ClaudiaJS, AWS Lambda and DynamoDB are really cool technologies.&lt;/li&gt;
    &lt;li&gt;One doesn‚Äòt get the telegram users timezone for free, you have to ask for location permission and
        resolve it with a third party service or ask directly for it (as I did here), which is weird, because a
        lot of people do not know their timezone.&lt;/li&gt;
    &lt;li&gt;Don&apos;t expect anyone to use your bot, because of finding it coincidentally. Marketing a telegram bot is
        hard and
        reduced to the group of telegram users (surprise)!&lt;/li&gt;
    &lt;li&gt;Take a lot of time to explain the purpose of the bot really well. &lt;a
            href=&quot;https://en.wikipedia.org/wiki/Unix_philosophy#Do_One_Thing_and_Do_It_Well&quot;&gt;It should do only
            one thing really well&lt;/a&gt; and creating another bot for other things is free.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/Robert-Nickel/schedule-bot&quot;&gt;source code
        here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Robert Nickel</name></author><category term="Projects" /><summary type="html">My younger brother tried to build a telegram bot, that gives him some information about his schedule, so he started, but stuck due to some infrastructure problems. I attempted to help him, and then basically took over the whole thing. I used claudia.js with its deployment and bot-builder features, and deployed it to AWS Lambda. Document based persistance happens using DynamoDB.</summary></entry><entry><title type="html">Hammurabis understanding of evolutionary loops</title><link href="/2020/06/05/closing-feedback-loops.html" rel="alternate" type="text/html" title="Hammurabis understanding of evolutionary loops" /><published>2020-06-05T00:00:00+02:00</published><updated>2020-06-05T00:00:00+02:00</updated><id>/2020/06/05/closing-feedback-loops</id><content type="html" xml:base="/2020/06/05/closing-feedback-loops.html">&lt;p&gt;
    A long time ago, &lt;a href=&quot;https://en.wikipedia.org/wiki/Hammurabi&quot;&gt;King Hammurabi of Babylonia&lt;/a&gt;,
    wrote a
    code of law,
    the so called &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_of_Hammurabi&quot;&gt;Code of Hammurabi&lt;/a&gt;,
    which holds some surprisingly effective thoughts regarding the contract between a landlord and a house
    builder.&lt;br&gt;&lt;br&gt;

    ‚ÄûIf a builder build a house for a man and complete it, (that man) shall give him two shekels of silver
    per
    SAK [a length unit] of house as his wage.‚Äú [1]&lt;br&gt;&lt;br&gt;

    A bigger house costs more money. But isn‚Äòt it interesting, how the house builder is not paid depending
    on
    the time it took to build it?
    There is no hourly rate, which means, the landlord wont get any unhappy financial surprises, which is
    good.
    But wait a second!
    Doesn‚Äòt that mean, that a house builder will do anything as fast and cheap as possible, wouldn&apos;t that be
    a
    catastrophy?
    He might put those people in danger, who want to live in this house later on.
    The key question is: How can the owner of the house assure, that it has a good quality, if he only pays
    depending on the size of the house?&lt;br&gt;&lt;br&gt;

    Hammurabi thought about this, did some risk management, and solved this ‚Äûquick and dirty‚Äú approach by
    the
    following law:&lt;br&gt;&lt;br&gt;

    ‚ÄûIf a builder build a house for a man and do not make its construction firm, and the house which he has
    built collapse and cause the death of the owner of the house,
    that builder shall be put to death. If it cause the death of a son of the owner of the house, they shall
    put
    to death a son of that builder.‚Äú [2]&lt;br&gt;&lt;br&gt;

    There is no need to explain, that the house builders will do their absolute best to prevent houses to
    collapse and kill someone,
    because they have so much skin in the game for an unlimited amount of time, meaning they can be killed
    because a house collapsed, they built 20 years ago.
    How exactly assured Hammurabi the quality of houses? By closing a feedback loop for the craftmanship of
    house building.
    Those who are really good at building houses will be able to keep building houses, while those who fail
    doing that will be stopped putting peoples live in danger.
    It might sound like a cruel practice from our modern cultural perspective, but it led to ridiculously
    good
    houses, there is no doubt.

    The house building quality solution is not a solution for house building anymore, maybe because of
    technological advancement and regulations,
    but I believe we can learn a lot from Hammurabis structural solution here. He shows us, that we need to
    close the feedback loop and reduce its complexity.
    This is, in my opinion, the single most important task of agile software processes.
    What I mean goes far beyond &lt;a
        href=&quot;https://aws.amazon.com/de/blogs/enterprise-strategy/enterprise-devops-why-you-should-run-what-you-build/&quot;&gt;‚ÄûYou
        build it, you run it.‚Äú&lt;/a&gt;.&lt;br&gt;&lt;br&gt;

    One example: A software architect, who does architectural work on a project and then leaves over to the
    next
    project, has zero skin in the game of the old project, and is therefore hardly able to improve.
    In a frictionless world, this architect would maybe get verbal feedback from people on the lower
    technical
    levels, that experience the actual haptical feedback that result from his decisions.
    But in the real world, complexity, reputation and hierarchy fog this verbal feedback, which complicates
    improvement for the architect further.
    And this is just one example for the concept of closed feedback loops, and therefore having skin in the
    game.&lt;br&gt;&lt;br&gt;

    Lets enhance our motto: ‚ÄûYou build it, you run it .. and you bleed for it.‚Äú, where bleeding is
    metaphorical
    for all the (negative) consequences that result from our decisions.
    It may be a phone call in the middle of the night, it may be doing overtime that originates in our own
    mistakes or might be getting fired.
    Especially the last point might sound extreme on the first glance, but think about this on a theoretical
    level first:
    Do you really want to build a team, in which people don&apos;t experience negative feedback on their own
    actions?
    Do you prefer working with people who survived the sometimes brutal reality, or would you rather work
    with
    people that have set up (and used!) safety nets a little too often?
    Please get this right: I am all for improvement that is based and being able to fail and learn. In order
    to
    be able to innovate, it is crucial to have playgrounds with limited consequences to failure.
    On the other hand I am worried, that an extensive lack of consequences will lead weak software
    craftsmen,
    who build houses that collapse.&lt;br&gt;&lt;br&gt;

    And, of course, be aware! Don‚Äòt let someone else put YOUR skin in HIS game. It has happend more than
    once,
    that a release plan, that was promised by a project manager led to overtime for engineers,
    or that product owners are blamed for quality issues, that were caused by ‚ÄûI will fix it later‚Äú minded
    engineers.
    See my article &lt;a href=&quot;http://robertnickel.online#segregating-responsibility&quot;&gt;The Two Dimensions of an
        Increment&lt;/a&gt; right below to get more detail on this topic.&lt;br&gt;&lt;br&gt;

    I found the inspiration for this thoughts in the book &lt;a href=&quot;https://amzn.to/2XzNbl7&quot;&gt;Skin in the
        Game&lt;/a&gt;
    [3] by Nassim Nicholas Taleb.&lt;br&gt;&lt;br&gt;

    [1] &lt;a href=&quot;https://ia800302.us.archive.org/6/items/cu31924074445523/cu31924074445523.pdf&quot;&gt;Harper,
        Robert
        Francis, Ph.D.
        The Code of Hammurabi, King of Babylon about 2250 B. C. Autographed Text, Transliteration,
        Translation,
        Glossary, Index of Subjects,
        Lists of Proper Names, Signs, Numerals, Corrections, and Erasures, with Map, Frontispiece, and
        Photograph of Text.&lt;/a&gt; p.81, ¬ß228&lt;br&gt;
    [2] &lt;a href=&quot;https://ia800302.us.archive.org/6/items/cu31924074445523/cu31924074445523.pdf&quot;&gt;Harper&lt;/a&gt;
    p.81,
    ¬ß229, ¬ß230&lt;br&gt;
    [3] &lt;a href=&quot;https://amzn.to/2XzNbl7&quot;&gt;Taleb, Nassim Nicholas. Skin in the Game, Random House,
        2018.&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;</content><author><name>Robert Nickel</name></author><category term="Thinking" /><category term="Agile" /><summary type="html">A long time ago, King Hammurabi of Babylonia, wrote a code of law, the so called Code of Hammurabi, which holds some surprisingly effective thoughts regarding the contract between a landlord and a house builder.</summary></entry></feed>